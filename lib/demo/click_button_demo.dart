import 'package:core_http/net/dio_util.dart';
import 'package:core_http/protocol/base_resp.dart';
import 'package:core_tools/json_utils.dart';
import 'package:core_tools/log_utils.dart';
import 'package:flutter/material.dart';

import '../project/entity/test_entity.dart';
import '../project/http/core/hi_net.dart';
import '../project/http/request/test_request.dart';

class ClickButtonDemo extends StatefulWidget {
  const ClickButtonDemo({Key? key}) : super(key: key);

  @override
  State<ClickButtonDemo> createState() => _ClickButtonDemoState();
}

class _ClickButtonDemoState extends State<ClickButtonDemo> {
  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("ClickButtonDemo"),
        elevation: 0.0,
      ),
      body: Container(
        padding: EdgeInsets.all(16.0),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            Stack(
              alignment: Alignment.topLeft, //对齐方式
              children: [
                Padding(
                  padding: EdgeInsets.fromLTRB(0, 10, 10, 0),
                  child: SizedBox(
                    width: 100.0,
                    height: 100.0,
                    child: Container(
                      alignment: Alignment(0.0, 0.0),
                      decoration: BoxDecoration(
                        color: Color.fromRGBO(3, 54, 255, 1.0),
                        borderRadius: BorderRadius.circular(8.0),
                      ),
                    ),
                  ),
                ),
                SizedBox(
                  width: 200.0,
                  height: 30.0,
                  child: GestureDetector(
                    //子 widget 可点击控件
                    onTap: clickButton,
                    child: Container(
                      decoration: BoxDecoration(
                          color: Color.fromRGBO(3, 54, 255, 1.0),
                          shape: BoxShape.circle,
                          gradient: RadialGradient(//镜像渐变
                              colors: [Colors.green, Colors.green])),
                      child: Icon(Icons.add, color: Colors.white, size: 32.0),
                    ),
                  ),
                ),
              ],
            )
          ],
        ),
      ),
    );
  }

  // void clickButton() {
  //   showToast(msg: "点击了按钮");
  // }

// void clickButton() {
//   HiCache.getInstance().setString(GlobalConstant.userName, "田宇11111");
//   HiCache.getInstance().setString(GlobalConstant.userName, "田宇");
//   HiCache.getInstance().setInt(GlobalConstant.userAge, 20);
//
//   var name = HiCache.getInstance()
//       .get<String>(GlobalConstant.userName); //指定泛型为 String
//   var age =
//       HiCache.getInstance().get(GlobalConstant.userAge); //不指定泛型 Int T 自动推断
//
//   debugPrint("睚眦 => name $name age $age");
// }

  // void clickButton() async {
  //   var result = await HiNet.getInstance().fire(TestRequest());
  //   var entity = Autogenerated.fromJson(result);
  //   LogUtils.d(entity.data?.first.desc ?? "", tag: "desc");
  // }

  void clickButton() async {
    List<BannerModel> banner = await WanRepository().getBanner();

    for (var element in banner) {
      LogUtils.d(element.title ?? "", tag: "测试数据");
    }
  }
}

class WanAndroidApi {
  /// 首页banner http://www.wanandroid.com/banner/json
  static const String BANNER = "banner";
  static const String baseBanner = "/banner/json";
  static const String USER_REGISTER = "user/register"; //注册
  static const String USER_LOGIN = "user/login"; //登录
  static const String USER_LOGOUT = "user/logout"; //退出

  // 拼接url
  static String getPath({String path: '', int? page, String resType: 'json'}) {
    StringBuffer sb = StringBuffer(path);
    if (page != null) {
      sb.write('/$page');
    }
    if (resType != null && resType.isNotEmpty) {
      sb.write('/$resType');
    }
    return sb.toString();
  }
}

class LoginReq {
  String username;
  String password;

  LoginReq(this.username, this.password);

  LoginReq.fromJson(Map<String, dynamic> json)
      : username = json['username'],
        password = json['password'];

  Map<String, dynamic> toJson() => {
        'username': username,
        'password': password,
      };

  @override
  String toString() {
    StringBuffer sb = StringBuffer('{');
    sb.write("\"username\":\"$username\"");
    sb.write(",\"password\":$password");
    sb.write('}');
    return sb.toString();
  }
}

class WanRepository {
  Future<List<BannerModel>> getBanner() async {
    BaseResp<List> baseResp = await DioUtil()
        .createNewDio()
        .setConfig(HttpConfig(
            status: "status", code: "errorCode", msg: "errorMsg", data: "data"))
        .request<List>(Method.get, WanAndroidApi.baseBanner);
    List<BannerModel> bannerList;
    if (baseResp.code != 0) {
      return Future.error(baseResp.msg);
    }
    bannerList = baseResp.data.map((value) {
      return BannerModel.fromJson(value);
    }).toList();
    return bannerList;
  }
}

class BannerModel {
  String? desc;
  int? id;
  String? imagePath;
  int? isVisible;
  int? order;
  String? title;
  int? type;
  String? url;

  BannerModel(
      {this.desc,
      this.id,
      this.imagePath,
      this.isVisible,
      this.order,
      this.title,
      this.type,
      this.url});

  BannerModel.fromJson(Map<String, dynamic> json) {
    desc = json['desc'];
    id = json['id'];
    imagePath = json['imagePath'];
    isVisible = json['isVisible'];
    order = json['order'];
    title = json['title'];
    type = json['type'];
    url = json['url'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = <String, dynamic>{};
    data['desc'] = desc;
    data['id'] = id;
    data['imagePath'] = imagePath;
    data['isVisible'] = isVisible;
    data['order'] = order;
    data['title'] = title;
    data['type'] = type;
    data['url'] = url;
    return data;
  }
}
